#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This is a free addon for check_mk.
# The download page http://exchange.check-mk.org/ and the current source
# can be found at http://bitbucket.org/darkfader/nagios/check_mk/edac
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.



# Author: Florian Heigl <fh@mathias-kettner.de>
# Check for edac error states: PCI and Memory 


# Example agent output:
_agent_output="""<<<edac_mem>>>
mc0 csrow0 8192 Registered-DDR3 0 0 S4ECD4ED
mc0 csrow1 8192 Registered-DDR3 0 0 S4ECD4ED
mc1 csrow0 8192 Registered-DDR3 0 0 S4ECD4ED
mc2 csrow0 8192 Registered-DDR3 0 0 S4ECD4ED"""


def inventory_edac_mem(checkname, info):
    inventory = []
    for line in info:
        if len(line) == 7:
            mc, csrow, size_mb, dimm_type, ce_count, ue_count, edac_mode = line
            inventory.append((("%s %s") % (mc, csrow), None))
            
    return inventory


def check_edac_mem(item, _no_params, info):
    for line in info:
        mc, csrow, size_mb, dimm_type, ce_count, ue_count, edac_mode = line
        if (("%s %s") % (mc, csrow)) == item:
            dimmdescr = ("%s MB %s DIMM") % (size_mb, dimm_type)
            # check correctable and uncorrectable error counters
            # tie in the EDAC mode here to modify results when using chipkill memory
            if saveint(ue_count)   > 0:
                return ((2, "CRITICAL - %s, Uncorrectable ECC errors found!!" % dimmdescr))
            elif saveint(ce_count) > 0:
                return ((1,  "WARNING - %s, Correctable ECC errors found!" % dimmdescr))
            else:
                return ((0, "OK - %s, no ECC errors found" % dimmdescr))

    return (3, "UNKNOWN - %s not found in agent output")


check_info['edac.mem'] = (check_edac_mem, "EDAC Memory %s", 0, inventory_edac_mem)
