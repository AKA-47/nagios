#!/usr/bin/python


#<<<one_hosts>>>
#    0 one-kvm1        -          10    250 / 400 (62%) 3.8G / 11.8G (31%) on


one_hosts_default_levels = { 
   "alloc_cpu" : (66.0, 90.0), 
   "used_mem" : (50.0,  99.0),

} 

import pprint

one_hosts_inventory_mode = [ "individual", "summary" ]

def parse_one_hosts_info(info):
   hostinfo = {}
   for line in info:
     # strip "(.*)" and "/" out of the list here to remove the last bug.
     #if "/" in line: line.remove("/")
     #if "\(.*\)" in line: line.remove("\(.*\)") 
     #print line

     # bs is for bullshit
     if len(line) == 12:
         id, host_name, cluster, running_vms, cpu_alloc, bs, cpu_total, bs, kb_alloc, bs, kb_total, state = line
     elif len(line) == 13:
         id, host_name, cluster, running_vms, cpu_alloc, bs, cpu_total, bs, kb_alloc, bs, kb_total, bs, state = line

     kb_alloc = saveint(kb_alloc)
     kb_total = saveint(kb_total)
     perf = {"vms" : running_vms, "cpu" : (cpu_alloc, cpu_total), "mem" : (kb_alloc, kb_total)}
     hostinfo[host_name] = { "cluster" : cluster, "perf" : perf, "state" : state}
   return hostinfo

def inventory_one_hosts(info):
    inventory = []
    hostinfo = parse_one_hosts_info(info)
    if "individual" in one_hosts_inventory_mode:
        for host_name in hostinfo.keys():
           if hostinfo[host_name]["state"] in [ "on", "update"]:
              inventory.append((host_name, "one_hosts_default_levels"))
    if "summary" in one_hosts_inventory_mode: 
        inventory.append(("SUMMARY", "one_hosts_default_levels"))
    return inventory


def check_one_hosts(item, params, info):
    hostinfo = parse_one_hosts_info(info)
    state = 0 
    alloc_cpu = 0
    total_cpu = 0
    used_mem  = 0
    total_mem = 0

    # Handle the summary of all hypervisors
    if item == "SUMMARY":
        # run our own numbers here to avoid rounding errors. 
        # it might be useless.
        for host_name in hostinfo.keys():
            alloc_cpu = alloc_cpu + saveint(hostinfo[host_name]["perf"]["cpu"][0])
            total_cpu = total_cpu + saveint(hostinfo[host_name]["perf"]["cpu"][1])
            h_used_mem, h_total_mem = hostinfo[host_name]["perf"]["mem"]
            used_mem  = used_mem  + saveint(h_used_mem)
            total_mem = total_mem + saveint(h_total_mem)
        

    # Handle the single hypervisors
    if item != "SUMMARY":
      for host_name in hostinfo.keys():
         if host_name == item:
             # status alerting
             # Bail out immediately if this host is down.
             # I didn't have this in the first version, I hope this 
             # works fine anyway.
             if hostinfo[host_name]["state"] not in [ "on", "update"]:
                 state = max(state, 2)
                 return (2, "Host status is %s" % hostinfo[host_name]["state"], [])

             alloc_cpu = int(hostinfo[host_name]["perf"]["cpu"][0])
             total_cpu = int(hostinfo[host_name]["perf"]["cpu"][1])
             free_cpu  = 100 - alloc_cpu
             used_mem, total_mem = hostinfo[host_name]["perf"]["mem"]
    
    # Cpu alerting
    cpu_pct = alloc_cpu * 100 / float(total_cpu)
    cpu_cnt = total_cpu / 100
    msg = "%d%% of %d CPU cores allocated" % (cpu_pct, cpu_cnt) + "!" * state

    if   cpu_pct >= params["alloc_cpu"][1]:
       state = max(state, 2)
       msg = msg + "!" * state
    elif cpu_pct >= params["alloc_cpu"][0]:
       state = max(state, 1)
       msg = msg + "!" * state


    # Memory alerting
    #used_mem, total_mem = hostinfo[host_name]["perf"]["mem"]
    free_gb  = saveint((total_mem - used_mem) / 1024 / 1024 )
    used_pct = used_mem * 100 / float(total_mem)

    msg = msg + ", %0.2f%% (%d GB) of memory allocated" % (used_pct, free_gb)

    if   used_pct >= params["used_mem"][1]:
       state = max(state, 2)
       msg = msg + "!" * state
    elif used_pct >= params["used_mem"][0]:
       state = max(state, 1)
       msg = msg + "!" * state


    perfdata = [ 
    ("alloc_cpu", alloc_cpu, total_cpu, params["alloc_cpu"][0], params["alloc_cpu"][1] ), 
    ("used_mem",  used_pct, params["used_mem"][0], params["used_mem"][1])]
                      
           
    return (state, msg, perfdata)
 

check_info["one_hosts"] = {
   "check_function"         : check_one_hosts,
    "inventory_function"    : inventory_one_hosts,
    "service_description"   : "OpenNebula Hypervisor %s",
    "has_perfdata"          : False,
}

